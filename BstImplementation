class BinaryTreeNode<T> {
 	    T data;
 		BinaryTreeNode<T> left;
 		BinaryTreeNode<T> right;
 		public BinaryTreeNode(T data)
 		{
 			this.data = data;
 		}
  }
 class Bst {
    private BinaryTreeNode<Integer> root;

    public void insert(int data) {
        //Implement the insert() function
        root = insert(data, root);
    }

    private BinaryTreeNode<Integer> insert(int data, BinaryTreeNode<Integer> root) {
        if (root == null) {
            BinaryTreeNode<Integer> newNode = new BinaryTreeNode<Integer>(data);
            return newNode;
        }
        if (root.data >= data) {
            root.left = insert(data, root.left);
        } else {
            root.right = insert(data, root.right);

        }
        return root;
    }

     public void remove(int data) {
         //Implement the remove() function
         root = remove(data, root);
     }
     private BinaryTreeNode<Integer> remove(int data , BinaryTreeNode<Integer> root){
         if(root == null){
             return null ;
         }
         if(data < root.data){
             root.left = remove(data, root.right);
             return root ;
         }else{
             if(root.left == null && root.right == null){
                 return null;
             }else if(root.left == null){
                 return root.right;
             }else if(root.right == null){
                 return root.left;
             }else{
                 BinaryTreeNode<Integer> minNode = root.right;
                 while(minNode.left != null){
                     minNode = minNode.left;
                 }
                 root.data = minNode.data;
                 root.right = remove(minNode.data , root.right);
                 return root;
             }

         }

     }


    public void printTree() {
        //Implement the printTree() function
        printTree(root);
    }

    private void printTree(BinaryTreeNode<Integer> root) {
        if (root == null) {
            return;
        }
        System.out.print(root.data + ":");
        if (root.left != null) {
            System.out.print("L:" + root.left.data + ",");

        }
        if (root.right != null) {
            System.out.print("R:" + root.right.data);

        }
        System.out.println();
        printTree(root.left);
        printTree(root.right);

    }

}
public class BstUse{
    public static void main(String[] args) {
        Bst obj=new Bst();
        obj.insert(50);
        obj.insert(40);
        obj.insert(60);
        System.out.println("given binary search tree");

        obj.printTree();
        obj.insert(10);
        obj.insert(5);
        obj.insert(55);
        obj.insert(35);
        obj.insert(20);
        obj.insert(70);
        obj.insert(52);
        obj.insert(66);
        obj.insert(35);
        obj.insert(45);
        obj.insert(75);
        System.out.println("After inserting in given bst is: ");
        obj.printTree();
        obj.remove(40);
        System.out.println("After deleting 40  bst is: ");
        obj.printTree();

    }
}
