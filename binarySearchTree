import java.util.LinkedList;
import java.util.Queue;

public class BinarySearchTree {



    private static class BSTNode{
        private int data;
        private BSTNode leftChild;
        private BSTNode rightChild;

        public BSTNode(int data) {
            this.data = data;
        }

        public String toString() {
            return data+"";
        }
    }

    private BSTNode root;

    public BinarySearchTree(int data) {
        root = new BSTNode(data);
    }
    public BinarySearchTree() {
        root=null;
    }
    public void insert(int data) {
        root = recursiveInsert(root,data);
    }

    private BSTNode recursiveInsert(BSTNode root, int data) {
        if(root == null) {
            return new BSTNode(data);
        }
        if(root.data >= data){
            root.leftChild = recursiveInsert(root.leftChild,data);
        }else{
            root.rightChild = recursiveInsert(root.rightChild,data );

        }
        return root ;
    }

    public void delete(int data) {
        root = recursiveDelete(root,data);
    }

    private BSTNode recursiveDelete(BSTNode node,int data){
        if(node == null) {
            return node;
        }
        else {
            if(data < node.data) {
                node.leftChild = recursiveDelete(node.leftChild,data);
            }
            else if(data > node.data) {
                node.rightChild = recursiveDelete(node.rightChild,data);
            }
            else {//we found the node to delete
                if(node.leftChild==null && node.rightChild == null) {
                    return null;
                }
                else if(node.leftChild == null) {
                    return node.rightChild;
                }
                else if(node.rightChild == null) {
                    return node.leftChild;
                }
                else {//Still need to handle the case with two children
                    BSTNode predecessor = getMax(node.leftChild);
                    int d = predecessor.data;
                    node.data = d;//update data at node
                    //remove predecessor node
                    node.leftChild = recursiveDelete(node.leftChild,d);
                }
            }
            return node;
        }
    }

    //assumes root is not null
    public BSTNode getMax(BSTNode root){
        while(root.rightChild!= null) {
            root = root.rightChild;
        }
        return root;
    }

    //assumes root is not null
    public BSTNode getMin(BSTNode root){
        while(root.leftChild!=null) {
            root = root.leftChild;
        }
        return root;
    }

    public boolean contains(int data) {
        if(find(data) == null) {return false;}
        else {return true;}
    }

    public BSTNode find(int key) {
        return recursiveFind(root,key);
    }

    private BSTNode recursiveFind(BSTNode node,int key) {
        //base case, made it to the end or I found it
        if(node == null || key == node.data) {
            return node;
        }
        if(key < node.data) {
            return recursiveFind(node.leftChild,key);
        }
        else {
            return recursiveFind(node.rightChild,key);
        }

    }

    //Traverse the tree in an preorder fashion
//Print the current node first and then recurse on the children
    public void preOrder() {
        preOrderRecurse(root);
    }

    public void preOrderRecurse(BSTNode root) {
        if(root==null){
            return;
        }
        System.out.print(root.data+" ");
        preOrderRecurse(root.leftChild);
        preOrderRecurse(root.rightChild);
    }


    //Traverse the tree in an inorder fashion
//Recursively print the left side of the current node, then the current node,
//then recursively print the right side of current node
//For a bst this will print the values in sorted order from smallest to largest
    public void inOrder() {
        inOrderRecurse(root);
    }

    public void inOrderRecurse(BSTNode node) {
            if(node==null){
                return;
            }
            inOrderRecurse(node.leftChild);
            System.out.print(node.data+" ");
            inOrderRecurse(node.rightChild);
    }

    //Traverse the tree in an postorder fashion
//Recurse on the children and then print the value in the current node
    public void postOrder() {
        postOrderRecurse(root);
    }

    public void postOrderRecurse(BSTNode node) {
          if(node==null){
              return;
          }
          postOrderRecurse(node.leftChild);
          postOrderRecurse(node.rightChild);
          System.out.print(node.data+" ");
    }

    //Traverse the tree in an level order fashion
//Print the current node, then the two children, then their children, ...
    public void levelOrder(){
        levelOrderHelper(root);
    }
    public void levelOrderHelper(BSTNode root) {
        if(root==null){
            return;
        }
        Queue<BSTNode> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            BSTNode current = queue.poll();//look up what this function does in the Java Documentation
            System.out.print(current.data + " ");
            if(current.leftChild!=null){
                queue.add(current.leftChild);
            }
            if(current.rightChild!=null){
                queue.add(current.rightChild);
            }
            //Enqueue (add) left child if it isn't null


            //Enqueue (add) left child if it isn't null

        }
    }

    //counts the number of nodes in the tree
    public int count() {
        return countRecurse(root);
    }

    //recursive helper method to count the nodes in the tree
    private int countRecurse(BSTNode root) {
        if(root==null){
            return 0;
        }
        return 1+countRecurse(root.leftChild)+countRecurse(root.rightChild);
    }

    public int countOdds() {
        return countOddsRecurse(root);
    }

    private int countOddsRecurse(BSTNode root) {
        if(root==null){
            return 0;
        }

        int leftcount=countOddsRecurse(root.leftChild);
        int rightcount=countOddsRecurse(root.rightChild);
        if(root.data%2!=0){
            return 1+leftcount+rightcount;
        }
        else{
            return leftcount+rightcount;
        }
    }



    public int countEvens() {
        return countEvensRecurse(root);
    }

    private int countEvensRecurse(BSTNode root) {
//        if (root == null)
//            return 0;
//
//        int val = (root.data%2==1) ? 0 : 1;
//
//        return val + countEvensRecurse(root.leftChild) + countEvensRecurse(root.rightChild);
        if (root == null)
            return 0;

        int leftcount=countEvensRecurse(root.leftChild);
        int rightcount=countEvensRecurse(root.rightChild);
        if(root.data%2==0){
            return 1+leftcount+rightcount;
        }
        else{
            return leftcount+rightcount;
        }
    }

    //returns the sum of the data in the tree
    public int sum() {
        return recursiveSum(root);
    }

    //recursive helper method to compute the sum
    private int recursiveSum(BSTNode root) {
        if(root==null){
            return 0;
        }
        return root.data+recursiveSum(root.leftChild)+recursiveSum(root.rightChild);
    }

    //max length path from root to leaf node
    public int height() {
        return recursiveHeight(root);
    }

    private int recursiveHeight(BSTNode root) {
        if(root==null){
            return 0;
        }
        return 1+Math.max(recursiveHeight(root.leftChild),recursiveHeight(root.rightChild));

    }



    //This method creates a test tree that you can use as
//you build out your find and insert methods
//After you have created your insert method,
//you should use that method to create test trees in the main method
    public static BinarySearchTree testTree(){
        BinarySearchTree bst = new BinarySearchTree(9);
        bst.root.rightChild = new BSTNode(11);
        bst.root.leftChild = new BSTNode(7);
        bst.root.leftChild.leftChild = new BSTNode(2);
        bst.root.leftChild.rightChild = new BSTNode(8);
        bst.root.rightChild.rightChild = new BSTNode(15);
        return bst;
    }

    public String toString() {
        return "Tree:" + recursiveToString(root, "");
    }

    private String recursiveToString(BSTNode node, String indent) {

        if(node == null) {return "";}
        else {
            return "\n" + indent + node.data +
                    recursiveToString(node.leftChild,indent + "  ")+
                    recursiveToString(node.rightChild,indent + "  ");
        }
    }
    public void printTree() {
        //Implement the printTree() function
        printTree(root);
    }
    private void printTree(BSTNode root){
        if(root == null){
            return;
        }
        System.out.print(root.data + ":");
        if(root.leftChild != null){
            System.out.print("L:" + root.leftChild.data + ",");

        }
        if(root.rightChild != null){
            System.out.print("R:" + root.rightChild.data );

        }
        System.out.println();
        printTree(root.leftChild);
        printTree(root.rightChild);

    }

    public static void main(String[] args) {
        //DO LOTS OF TESTING!!

       // BinarySearchTree bst = testTree();
        BinarySearchTree bst = new BinarySearchTree();
        bst.insert(12);
        bst.insert(25);
        bst.insert(22);
        bst.insert(32);
        bst.insert(39);
        bst.insert(37);
        bst.insert(47);
        bst.insert(52);
        bst.insert(42);
        bst.insert(27);

        bst.printTree();
        System.out.println("\nPre order traversal.....");
        bst.preOrder();
        System.out.println("\nIn order traversal.....");
        bst.inOrder();
        System.out.println("\nPost order traversal.....");
        bst.postOrder();
        System.out.println("\nLevel order traversal.....");
        bst.levelOrder();
        System.out.println("\nNumber of nodes are: "+bst.count());
        System.out.println("Sum of nodes is: "+bst.sum());
        System.out.println("Height of the binary search tree is: "+bst.height());
        System.out.println("Number of nodes contains odd number is: "+bst.countOdds());
        System.out.println("Number of nodes contains even number is: "+bst.countEvens());
    }


}
